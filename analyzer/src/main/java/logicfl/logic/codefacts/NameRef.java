package logicfl.logic.codefacts;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.jdt.core.dom.IBinding;
import org.eclipse.jdt.core.dom.IVariableBinding;

import logicfl.logic.FactManager;
import logicfl.utils.CodeUtils;

/**
 * {@code name_ref/4} predicate to contain simple binding information of names.
 * 
 * {@code name_ref(?name_ref_id, ?name_type, ?name, ?binding_key).}
 * 
 * <ul>
 *  <li>name_ref_id: the id of this name.</li>
 *  <li>name_type: the type of this name - varible, field, parameter, method, etc.</li>
 *  <li>name: actual string name.</li>
 *  <li>binding_key: a binding key of this name generated by Eclipse JDT.</li>
 * </ul>
 */
public class NameRef {
    //For unresolved names.
    public static final NameRef UNKNOWN = new NameRef(0, 0, "none", "");

    public static final int K_NONE = 0;
    public static final int K_VAR = 1;
    public static final int K_PARAM = 2;
    public static final int K_FIELD = 3;
    public static final int K_METHOD = 4;
    public static final int K_TYPE = 5;
    public static final int K_QUALIFIED = 6;
    public static final String T_VAR = "var";
    public static final String T_PARAM = "param";
    public static final String T_FIELD = "field";
    public static final String T_METHOD = "method";
    public static final String T_TYPE = "type";
    public static final String T_QUALIFIED = "q_name";
    public static final String T_NONE = "none";
    public static final String KEY_DELIM = ":";
    public static final String PREFIX = "name_ref";
    public static final String DELIM = "_";

    public static Pattern pNamePredicate = Pattern.compile(PREFIX+"\\(([_a-z0-9]+), ([_a-z]+), '(.*)', '(.*)'\\).*");

    private String id;
    private int kind;
    private String name;
    private String key;
    private String nameType;

    public NameRef(String nameRefId, int kind, String name, String key) {
        this.id = nameRefId;
        this.kind = kind;
        this.name = name;
        this.key = key;
        setNameType(kind);
    }

    public NameRef(int index, int kind, String name, String key) {
        this(NameRef.createId(name, index, kind), kind, name, key);
    }

    public NameRef(IBinding binding, int index) {
        this.id = NameRef.createId(binding, index);
        name = binding.getName();
        if(binding.getKind() == IBinding.METHOD) {
            kind = K_METHOD;
        } else if(binding.getKind() == IBinding.VARIABLE) {
            IVariableBinding vBinding = (IVariableBinding)binding;
            if(vBinding.isParameter()) {
                kind = NameRef.K_PARAM;
            } else if(vBinding.isField()) {
                kind = NameRef.K_FIELD;
            } else {
                kind = NameRef.K_VAR;
            }
        } else if(binding.getKind() == IBinding.TYPE) {
            kind = K_TYPE;
        } else {
            kind = K_NONE;
        }
        this.key = binding.getKey();
        setNameType(kind);
    }

    public NameRef(String nameRefStr) {
        Matcher m = pNamePredicate.matcher(nameRefStr);
        if(m.matches()) {
            this.id = m.group(1);
            kind = NameRef.K_NONE;
            nameType = m.group(2);
            switch(nameType) {
                case T_VAR:
                    kind = K_VAR;
                    break;
                case T_FIELD:
                    kind = K_FIELD;
                    break;
                case T_PARAM:
                    kind = K_PARAM;
                    break;
                case T_METHOD:
                    kind = K_METHOD;
                    break;
                case T_TYPE:
                    kind = K_TYPE;
                    break;
                case T_QUALIFIED:
                    kind = K_QUALIFIED;
                    break;
            }
            name = m.group(3);
            key = m.group(4);
        }
    }

    public String getNameType() {
        return nameType;
    }

    public void setNameType(int kind) {
        switch(kind) {
            case K_VAR:
                nameType = T_VAR;
                break;
            case K_PARAM:
                nameType = T_PARAM;
                break;
            case K_FIELD:
                nameType = T_FIELD;
                break;
            case K_METHOD:
                nameType = T_METHOD;
                break;
            case K_TYPE:
                nameType = T_TYPE;
                break;
            case K_QUALIFIED:
                nameType = T_QUALIFIED;
                break;
            default:
                nameType = T_NONE;
        }
    }

    public static String createId(IBinding binding, int index) {
        int kind = -1;
        if(binding.getKind() == IBinding.METHOD) {
            kind = K_METHOD;
        } else if(binding.getKind() == IBinding.VARIABLE) {
            IVariableBinding vBinding = (IVariableBinding)binding;
            if(vBinding.isParameter()) {
                kind = NameRef.K_PARAM;
            } else if(vBinding.isField()) {
                kind = NameRef.K_FIELD;
            } else {
                kind = NameRef.K_VAR;
            }
        } else if(binding.getKind() == IBinding.TYPE) {
            kind = K_TYPE;
        } else {
            kind = K_NONE;
        }
        return createId(binding.getName(), index, kind);
    }

    public static String createId(String name, int index, int kind) {
        String prefix = null;
        switch(kind) {
            case K_VAR:
                prefix = String.valueOf(T_VAR.charAt(0));
                break;
            case K_PARAM:
                prefix = String.valueOf(T_PARAM.charAt(0));
                break;
            case K_FIELD:
                prefix = String.valueOf(T_FIELD.charAt(0));;
                break;
            case K_METHOD:
                prefix = String.valueOf(T_METHOD.charAt(0));
                break;
            case K_TYPE:
                prefix = String.valueOf(T_TYPE.charAt(0));;
                break;
            case K_QUALIFIED:
                prefix = String.valueOf(T_QUALIFIED.charAt(0));;
                break;
            default:
                prefix = String.valueOf(T_NONE.charAt(0));;
        }
        String convertedName = CodeUtils.camelToLower(kind == K_QUALIFIED ? CodeUtils.qualifiedToSimple(name) : name);
        return String.join("", prefix, DELIM, convertedName, DELIM, String.valueOf(index));
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    @Override
    public String toString() {
        return String.join("", PREFIX, "(", id, ", ", nameType, ", ",
            FactManager.getQuotedString(name), ", ",  FactManager.getQuotedString(key), ")");
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((key == null) ? 0 : key.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if(obj != null && obj instanceof NameRef ref) {
            return ref.getKey().equals(key);
        }
        return false;
    }

    public boolean isVariable() {
        switch(kind) {
            case K_VAR:
            case K_PARAM:
            case K_FIELD:
            case K_QUALIFIED:
                return true;
            default:
                return false;
        }
    }

    public int getKind() {
        return this.kind;
    }
}
