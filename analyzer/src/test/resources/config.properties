#Paths for a bug - multiple paths should be separated by a path separator.
base.dir=.
source.path=src/test/java
class.path=build/libs/*:src/test/resources/test-sample.jar

#Common Files required for execution.
jvm=/usr/bin/java
jacoco.path=src/test/resources/jacocoagent.jar
rules.pl=src/main/resources/npe-rules.pl

#Bug specific files rquired for execution.
#Automatically add base.dir unless an absolute path is given.
coverage.info=src/test/resources/coverage.json
tests.info=src/test/resources/tests.json

#Settings for analysis.
#junit4 or junit5
junit.version=junit5
#A prefix of packages which include target classes.
target.prefix=sample
#trace or coverage - DynamicAnalyzer only monitors lines appeared in (trace or coverage).
monitor.target=coverage
#null_only or null_boolean - add val/3 predicates only if an observed value is null or null/boolean.
monitor.value=null_only
#all_visible or target_only - checking all visible variables or only monitor targets.
monitor.method=all_visible
#StaticAnalyzer only adds predicates for covered parts of code if true.
#Probes are added for covered expressions only regardless of this option.
covered.only=true
#Print out some info. mostly test execution results.
print.debug.info=true

#Output directory and files which will be produced under the directory.
#Automatically add base.dir + output.dir unless an absolute path is given.
output.dir=src/test/resources/result
jacoco.exec=jacoco.exec
#Store NPE stack trace information.
npe.info.path=npe.traces.json
#Logical facts collected by StaticAnalyzer.
facts.pl=logic-fl.pl
#Facts about code for references.
code.facts.pl=code-facts.pl
#Identified root causes will be stored in this file.
root.cause=root_cause.txt
#Identified fault locations - class, line - will be stored in this file.
fault.loc=fault_locs.txt
#Store line mapping information used for probing.
line.info=line.info.json
#Store identified monitor targets.
monitor.target.path=monitor.targets.json